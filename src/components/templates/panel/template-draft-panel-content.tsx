import ErrorLine from "@/components/error-line";
import BrandIcon from "@/components/icons/brand";
import { useServicesUtils } from "@/components/service/services-provider";
import { useTemporarilyAddNewEntity } from "@/components/stores/main/main-store-provider";
import { useSystem } from "@/components/system/system-provider";
import { templateInputValidator } from "@/components/templates/panel/input-validator";
import { useTemplateDraftPanel } from "@/components/templates/panel/template-draft-panel-provider";
import { TTemplateDraft, TTemplateInput } from "@/components/templates/template-draft-store";
import { useTemplateDraftStore } from "@/components/templates/template-draft-store-provider";
import { ScrollArea } from "@/components/ui/scroll-area";
import { cn } from "@/components/ui/utils";
import { drawerAnimationMs } from "@/lib/constants";
import { formatGB } from "@/lib/helpers/format-gb";
import { generateDomain } from "@/lib/helpers/generate-domain";
import { useAppForm } from "@/lib/hooks/use-app-form";
import { TemplateInputTypeSchema } from "@/server/go/client.gen";
import { api } from "@/server/trpc/setup/client";
import {
  ArchiveIcon,
  DatabaseIcon,
  GlobeIcon,
  LoaderIcon,
  TextCursorInputIcon,
} from "lucide-react";
import { ResultAsync } from "neverthrow";
import { HTMLAttributes, useMemo, useRef } from "react";
import { toast } from "sonner";
import { z } from "zod";

type TProps = {
  templateDraft: TTemplateDraft;
  className?: string;
} & HTMLAttributes<HTMLFormElement>;

export const TemplateInputSchema = z.object({
  id: z.string(),
  value: z.string(),
  type: TemplateInputTypeSchema,
});
type TInput = z.infer<typeof TemplateInputSchema>;

export const templateDraftMaxStorageGb = 100;

export default function TemplateDraftPanelContent({ templateDraft, className, ...rest }: TProps) {
  const visibleInputs = useMemo(
    () => templateDraft.template.definition.inputs.filter((i) => !i.hidden),
    [templateDraft.template.definition.inputs],
  );

  const { data: systemData } = useSystem();

  const wildcardDomain = systemData?.data.system_settings.wildcard_domain;
  const autoGeneratedDomainsMap = useMemo(() => {
    if (!wildcardDomain) return undefined;

    const map = new Map<string, string>();
    for (const input of visibleInputs) {
      if (input.type === "host") {
        const domain = generateDomain(
          `${templateDraft.name} ${input.name.replace("Domain", "")}`,
          wildcardDomain,
        );
        map.set(input.id, domain);
      }
    }
    return map;
  }, [wildcardDomain, templateDraft.name, visibleInputs]);

  const temporarilyAddNewEntity = useTemporarilyAddNewEntity();

  const removeTemplateDraft = useTemplateDraftStore((s) => s.remove);
  const hideTemplateDraft = useTemplateDraftStore((s) => s.hide);
  const { closePanel } = useTemplateDraftPanel();
  const { invalidate: invalidateServices } = useServicesUtils({
    teamId: templateDraft.teamId,
    projectId: templateDraft.projectId,
    environmentId: templateDraft.environmentId,
  });

  const timeout = useRef<NodeJS.Timeout | null>(null);

  const minStorageGb = useMemo(
    () => systemData?.data.storage.minimum_storage_gb || 1,
    [systemData],
  );
  const maxStorageGb = useMemo(
    () => Math.min(templateDraftMaxStorageGb, systemData?.data.storage.maximum_storage_gb || 100),
    [systemData],
  );
  const storageStepGb = useMemo(() => systemData?.data.storage.storage_step_gb || 1, [systemData]);

  const {
    mutateAsync: deployTemplate,
    error: errorDeployTemplate,
    isPending: isPendingDeployTemplate,
  } = api.templates.deploy.useMutation({
    onSuccess: async () => {
      const res = await ResultAsync.fromPromise(
        invalidateServices(),
        () => new Error("Failed to invalidate services"),
      );
      hideTemplateDraft(templateDraft.id);

      if (res.isErr()) {
        console.error("Failed to invalidate services", res.error);
        toast.error("Failed to invalidate services", {
          description: "Try refreshing the page to see the changes.",
        });
      }

      closePanel();

      if (timeout.current) clearTimeout(timeout.current);
      timeout.current = setTimeout(() => {
        removeTemplateDraft(templateDraft.id);
      }, drawerAnimationMs);
    },
  });

  const form = useAppForm({
    defaultValues: {
      inputs: visibleInputs.map((input) => {
        if (input.type === "database-size" || input.type === "volume-size") {
          const _input: TInput = {
            id: input.id,
            type: input.type,
            value: input.default
              ? String(Math.min(Math.max(minStorageGb, Number(input.default)), maxStorageGb))
              : "",
          };
          return _input;
        }

        if (input.type === "host") {
          const _input: TInput = {
            id: input.id,
            type: input.type,
            value: autoGeneratedDomainsMap?.get(input.id) || "",
          };
          return _input;
        }

        const _input: TInput = {
          id: input.id,
          type: input.type,
          value: input.default || "",
        };
        return _input;
      }),
    },
    onSubmit: async ({ value }) => {
      const editedInputs = value.inputs.map((input, i) => ({
        id: visibleInputs[i].id,
        value: input.value !== "" ? input.value : visibleInputs[i].default || "",
      }));
      const res = await deployTemplate({
        groupName: templateDraft.name,
        groupDescription: templateDraft.description,
        teamId: templateDraft.teamId,
        projectId: templateDraft.projectId,
        environmentId: templateDraft.environmentId,
        templateId: templateDraft.template.id,
        inputs: editedInputs,
      });

      for (const item of res.data) {
        if (item.service_group?.id) {
          temporarilyAddNewEntity(item.service_group.id);
          break;
        }
      }
    },
  });

  return (
    <form
      className={cn(
        "mt-4 flex w-full flex-1 flex-col overflow-hidden border-t select-text sm:mt-6",
        className,
      )}
      {...rest}
      onSubmit={(e) => {
        e.preventDefault();
        e.stopPropagation();
        form.validateArrayFieldsStartingFrom("inputs", 0, "submit");
        form.handleSubmit(e);
      }}
    >
      <ScrollArea classNameViewport="pb-[calc(var(--safe-area-inset-bottom)+2rem)]">
        <div className="flex w-full flex-1 flex-col gap-6 px-3 py-5 sm:p-6">
          {errorDeployTemplate && <ErrorLine message={errorDeployTemplate.message} />}
          {/* Inputs */}
          <div className="-mx-1 flex w-[calc(100%+0.5rem)] flex-col">
            <div className="-my-4 flex w-full flex-col">
              <form.AppField
                name="inputs"
                mode="value"
                children={(field) =>
                  field.state.value.map((_, i) => (
                    <div
                      key={`field[${i}]`}
                      className="flex w-full flex-col gap-2.5 p-1 py-4 md:w-1/2"
                    >
                      <div className="flex w-full flex-col gap-1 px-1.5">
                        <div className="flex w-full items-start gap-2">
                          <TemplateInputIcon input={visibleInputs[i]} />
                          <form.Subscribe
                            selector={(state) => ({ values: state.values })}
                            children={({ values }) => (
                              <p className="-mt-0.5 min-w-0 shrink leading-tight font-semibold">
                                {visibleInputs[i].name}
                                {(visibleInputs[i].type === "database-size" ||
                                  visibleInputs[i].type === "volume-size") && (
                                  <>
                                    <span className="pr-[0.6ch]">{":"}</span>
                                    <span className="text-foreground bg-foreground/6 border-foreground/6 rounded-md border px-1.25 py-0.5 font-mono">
                                      {formatGB(Number(values.inputs[i].value))}
                                    </span>
                                  </>
                                )}
                              </p>
                            )}
                          />
                        </div>
                        <p className="text-muted-foreground w-full leading-snug">
                          {visibleInputs[i].description}
                        </p>
                      </div>
                      <form.AppField
                        validators={{
                          onChange: ({ value }) =>
                            templateInputValidator({
                              value,
                              type: visibleInputs[i].type,
                              minStorageGb,
                              maxStorageGb,
                            }),
                        }}
                        key={`inputs[${i}].name`}
                        name={`inputs[${i}].value`}
                      >
                        {(field) => {
                          const input = visibleInputs[i];
                          if (input.type === "database-size" || input.type === "volume-size") {
                            return (
                              <field.StorageSizeInput
                                field={field}
                                className="w-full px-1.5 py-1.5"
                                onBlur={field.handleBlur}
                                min={minStorageGb}
                                max={maxStorageGb}
                                step={storageStepGb}
                                minMaxFormatter={formatGB}
                                defaultValue={[Number(visibleInputs[i].default || "10")]}
                                value={field.state.value ? [Number(field.state.value)] : undefined}
                                onValueChange={(value) => {
                                  field.handleChange(String(value[0]));
                                }}
                              />
                            );
                          }
                          return (
                            <field.DomainInput
                              field={field}
                              value={field.state.value}
                              onBlur={field.handleBlur}
                              onChange={(e) => {
                                field.handleChange(e.target.value);
                              }}
                              placeholder={input.name}
                              autoCapitalize="off"
                              autoCorrect="off"
                              autoComplete="off"
                              spellCheck="false"
                              autoGeneratedDomain={autoGeneratedDomainsMap?.get(input.id)}
                            />
                          );
                        }}
                      </form.AppField>
                    </div>
                  ))
                }
              />
            </div>
          </div>
          {/* Services */}
          <div className="flex w-full flex-col gap-2 pt-1">
            <h3 className="w-full px-1.5 text-xl leading-tight font-bold">Services</h3>
            <ol className="-mx-1 flex w-[calc(100%+0.5rem)] flex-wrap">
              {templateDraft.template.definition.services.map((service) => (
                <TemplateServiceCard key={service.id} service={service} className="md:w-1/2" />
              ))}
            </ol>
          </div>
        </div>
      </ScrollArea>
      <div className="flex w-full flex-col gap-2 border-t px-3 pt-3 pb-[calc(var(--safe-area-inset-bottom)+0.75rem)] sm:px-6 sm:pt-6 sm:pb-[calc(var(--safe-area-inset-bottom)+1.5rem)]">
        <form.Subscribe
          selector={(state) => ({ isSubmitting: state.isSubmitting })}
          children={({ isSubmitting }) => {
            const isPending = isPendingDeployTemplate || isSubmitting;
            return (
              <form.SubmitButton
                data-pending={isPending ? true : undefined}
                className="group/button data-pending:bg-foreground/60 w-full"
                disabled={isPending}
                fadeOnDisabled={false}
              >
                {isPending && (
                  <div className="absolute top-0 left-0 h-full w-full items-center justify-center overflow-hidden rounded-lg">
                    <div className="from-foreground/0 via-foreground to-foreground/0 animate-ping-pong absolute top-1/2 left-1/2 aspect-square w-full origin-center -translate-1/2 bg-gradient-to-r" />
                  </div>
                )}
                <div className="relative flex w-full items-center justify-center gap-1.5">
                  {isPending && (
                    <LoaderIcon className="-my-1 -ml-0.5 size-5 shrink-0 animate-spin" />
                  )}
                  <p className="min-w-0 shrink">{isPending ? "Deploying" : "Deploy"}</p>
                </div>
              </form.SubmitButton>
            );
          }}
        ></form.Subscribe>
      </div>
    </form>
  );
}

function TemplateServiceCard({
  service,
  className,
}: {
  service: TTemplateDraft["template"]["definition"]["services"][number];
  className?: string;
}) {
  const descriptionText = useMemo(() => {
    if (service.type === "docker-image") {
      return service.image;
    }
    if (service.type === "database") {
      return `${service.database_type}:${service.database_config?.version || "latest"}`;
    }
    return "Unknown service type";
  }, [service]);
  return (
    <li className={cn("flex w-full p-1", className)}>
      <div className="flex w-full flex-col rounded-xl border px-4 py-3.5">
        <div className="flex w-full items-center justify-start gap-3">
          <BrandIcon brand={service.icon} color="brand" className="size-6 shrink-0" />
          <div className="-mt-0.5 flex min-w-0 flex-1 flex-col justify-start gap-0.5">
            <p className="min-w-0 shrink truncate leading-tight font-semibold">{service.name}</p>
            <p className="text-muted-foreground amin-w-0 shrink truncate text-sm leading-tight">
              {descriptionText}
            </p>
          </div>
        </div>
      </div>
    </li>
  );
}

function TemplateInputIcon({ input, className }: { input: TTemplateInput; className?: string }) {
  const classNameDefault = "size-4 shrink-0";
  if (input.type === "database-size") {
    return <DatabaseIcon className={cn(classNameDefault, className)} />;
  }
  if (input.type === "volume-size") {
    return <ArchiveIcon className={cn(classNameDefault, className)} />;
  }
  if (input.type === "host") {
    return <GlobeIcon className={cn(classNameDefault, className)} />;
  }
  return <TextCursorInputIcon className={cn(classNameDefault, className)} />;
}
