import BrandIcon from "@/components/icons/brand";
import {
  Block,
  BlockItem,
  BlockItemButtonLike,
  BlockItemContent,
  BlockItemHeader,
  BlockItemTitle,
} from "@/components/service/panel/content/undeployed/block";
import DeployButtonSection from "@/components/service/panel/content/undeployed/deploy-button-section";
import VariablesBlock from "@/components/service/panel/content/undeployed/variables-block";
import { WrapperForm, WrapperInner } from "@/components/service/panel/content/undeployed/wrapper";
import { useSystem } from "@/components/system/system-provider";
import { Button } from "@/components/ui/button";
import { cn } from "@/components/ui/utils";
import { generateDomain } from "@/lib/helpers/generate-domain";
import { useAppForm } from "@/lib/hooks/use-app-form";
import { TVariableForCreate } from "@/server/trpc/api/variables/types";
import { api } from "@/server/trpc/setup/client";
import { CheckCircleIcon, CircleSlashIcon, EyeOffIcon, GitBranchIcon } from "lucide-react";
import { useMemo } from "react";
import { toast } from "sonner";

type TProps = {
  repo: string;
  owner: string;
  branch: string;
  installationId: number;
  detectedPort: string | undefined;
};

export function UndeployedContentGit({
  repo,
  owner,
  branch,
  installationId,
  detectedPort,
}: TProps) {
  const { data: systemData } = useSystem();
  const wildcardUrl = systemData?.data.system_settings.wildcard_domain;
  const wildcardDomain = wildcardUrl ? new URL(wildcardUrl).hostname : undefined;
  const autoGeneratedDomain = useMemo(() => {
    if (!wildcardDomain) return undefined;
    const domain = generateDomain(repo, wildcardDomain);
    return domain;
  }, [wildcardDomain, repo]);

  const form = useAppForm({
    defaultValues: {
      branch: branch,
      domain: autoGeneratedDomain || "",
      isPublic: true,
      port: detectedPort !== undefined ? detectedPort : "",
      variables: [{ name: "", value: "" }] as TVariableForCreate[],
    },
    onSubmit: ({ value }) => {
      toast.info("Submitted", {
        description: JSON.stringify(value, null, 2),
      });
    },
  });

  const {
    data: dataRepository,
    isPending: isPendingRepository,
    error: errorRepository,
  } = api.git.getRepository.useQuery({
    owner,
    repoName: repo,
    installationId,
  });

  return (
    <WrapperForm
      onSubmit={(e) => {
        e.preventDefault();
        form.handleSubmit(e);
      }}
    >
      <WrapperInner>
        {/* Repository and Branch */}
        <Block>
          {/* Repository */}
          <BlockItem>
            <BlockItemHeader>
              <BlockItemTitle>Repository</BlockItemTitle>
            </BlockItemHeader>
            <BlockItemContent>
              <BlockItemButtonLike
                asElement="div"
                text={`${owner}/${repo}`}
                Icon={({ className }) => (
                  <BrandIcon brand="github" color="brand" className={className} />
                )}
              />
            </BlockItemContent>
          </BlockItem>
          {/* Branch */}
          <BlockItem>
            <BlockItemHeader>
              <BlockItemTitle>Branch</BlockItemTitle>
            </BlockItemHeader>
            <BlockItemContent>
              <form.AppField
                name="branch"
                children={(field) => (
                  <field.AsyncDropdown
                    dontCheckUntilSubmit
                    field={field}
                    value={field.state.value}
                    onChange={(v) => field.handleChange(v)}
                    items={dataRepository?.repository.branches?.map((b) => b.name)}
                    isPending={isPendingRepository}
                    error={errorRepository?.message}
                    commandInputPlaceholder="Search branches..."
                    commandEmptyText="No branches found"
                    CommandEmptyIcon={GitBranchIcon}
                  >
                    {({ isOpen }) => (
                      <BlockItemButtonLike
                        asElement="button"
                        text={field.state.value}
                        Icon={({ className }) => (
                          <GitBranchIcon className={cn("scale-90", className)} />
                        )}
                        variant="outline"
                        open={isOpen}
                        onBlur={field.handleBlur}
                      />
                    )}
                  </field.AsyncDropdown>
                )}
              />
            </BlockItemContent>
          </BlockItem>
        </Block>
        {/* Domain and Port */}
        <Block>
          {/* Domain */}
          <BlockItem>
            <BlockItemHeader>
              <BlockItemTitle>Domain</BlockItemTitle>
              <form.AppField
                name="isPublic"
                children={(field) => (
                  <Button
                    type="button"
                    variant="ghost"
                    onClick={() => field.handleChange(!field.state.value)}
                    data-private={!field.state.value ? true : undefined}
                    className="group/button has-hover:hover:bg-border -my-1 -mr-0.5 ml-auto flex cursor-pointer items-center justify-center gap-2.5 rounded-full py-1 pr-1 pl-2.5 font-medium"
                  >
                    <p className="text-muted-foreground group-data-private/button:text-foreground has-hover:group-hover/button:text-foreground min-w-0 shrink">
                      Private
                    </p>
                    <div className="bg-muted-more-foreground group-data-private/button:bg-foreground relative h-5 w-9 rounded-full transition">
                      <div className="bg-background absolute top-0.5 left-0.5 size-4 rounded-full transition group-data-private/button:translate-x-4" />
                    </div>
                  </Button>
                )}
              />
            </BlockItemHeader>
            <BlockItemContent>
              <form.Subscribe
                selector={(state) => ({ isPublic: state.values.isPublic })}
                children={({ isPublic }) => {
                  if (!isPublic) {
                    return <PrivateServiceField />;
                  }
                  return (
                    <form.AppField
                      name="domain"
                      children={(field) => (
                        <field.DomainInput
                          field={field}
                          value={field.state.value}
                          onBlur={field.handleBlur}
                          onChange={(e) => {
                            field.handleChange(e.target.value);
                          }}
                          placeholder="example.com"
                          autoCapitalize="off"
                          autoCorrect="off"
                          autoComplete="off"
                          spellCheck="false"
                          autoGeneratedDomain={autoGeneratedDomain}
                        />
                      )}
                    />
                  );
                }}
              />
            </BlockItemContent>
          </BlockItem>
          {/* Branch */}
          <BlockItem>
            <BlockItemHeader>
              <BlockItemTitle>Port</BlockItemTitle>
              <form.Subscribe
                selector={(state) => ({ isPublic: state.values.isPublic })}
                children={({ isPublic }) => {
                  if (isPublic === false) return null;
                  return (
                    <div
                      data-detected={detectedPort !== undefined ? true : undefined}
                      className="bg-warning/10 text-warning border-warning/10 data-detected:text-success data-detected:bg-success/10 data-detected:border-success/10 -my-1 ml-auto flex min-w-0 shrink items-center justify-start gap-1.5 rounded-full border px-2 py-0.5"
                    >
                      {detectedPort !== undefined ? (
                        <CheckCircleIcon className="-ml-0.75 size-3.5 shrink-0" />
                      ) : (
                        <CircleSlashIcon className="-ml-0.75 size-3.5 shrink-0" />
                      )}
                      <p className="min-w-0 shrink truncate text-sm leading-tight font-medium">
                        {detectedPort !== undefined ? (
                          <>
                            {" "}
                            Detected: <span className="font-bold">{detectedPort}</span>
                          </>
                        ) : (
                          "Couldn't detect"
                        )}
                      </p>
                    </div>
                  );
                }}
              />
            </BlockItemHeader>
            <BlockItemContent>
              <form.Subscribe
                selector={(state) => ({ isPublic: state.values.isPublic })}
                children={({ isPublic }) => {
                  if (!isPublic) {
                    return <PrivateServiceField />;
                  }
                  return (
                    <form.AppField
                      name="port"
                      children={(field) => (
                        <field.TextField
                          field={field}
                          value={field.state.value}
                          onBlur={field.handleBlur}
                          onChange={(e) => {
                            field.handleChange(e.target.value);
                          }}
                          showUndo={
                            detectedPort !== undefined && field.state.value !== detectedPort
                          }
                          onUndo={() => {
                            if (detectedPort !== undefined) {
                              field.handleChange(detectedPort);
                            }
                          }}
                          placeholder="3000"
                          autoCapitalize="off"
                          autoCorrect="off"
                          autoComplete="off"
                          spellCheck="false"
                          inputMode="numeric"
                          pattern="\d*"
                        />
                      )}
                    />
                  );
                }}
              />
            </BlockItemContent>
          </BlockItem>
        </Block>
        {/* @ts-expect-error: This type is completely fine. The form here encapculates the variable only form but it doesn't work for some reason */}
        <VariablesBlock form={form} />
      </WrapperInner>
      <DeployButtonSection isPending={false} />
    </WrapperForm>
  );
}

function PrivateServiceField() {
  return (
    <div className="bg-input text-muted-foreground flex w-full items-center gap-2 rounded-lg border px-3 py-2.5 font-medium">
      <EyeOffIcon className="size-4.5 shrink-0" />
      <p className="min-w-0 shrink truncate leading-tight">Private service</p>
    </div>
  );
}
