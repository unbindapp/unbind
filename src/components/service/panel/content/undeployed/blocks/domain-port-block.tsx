import {
  Block,
  BlockItem,
  BlockItemContent,
  BlockItemHeader,
  BlockItemTitle,
} from "@/components/block";
import { Button } from "@/components/ui/button";
import { validateDomain } from "@/lib/helpers/validate-domain";
import { validatePort } from "@/lib/helpers/validate-port";
import { withForm } from "@/lib/hooks/use-app-form";
import { CheckCircleIcon, CircleSlashIcon, EyeOffIcon } from "lucide-react";

const DomainPortBlock = withForm({
  defaultValues: {
    isPublic: true,
    domain: "",
    targetPort: "",
  },
  props: {
    autoGeneratedDomain: undefined as string | undefined,
    detectedPort: undefined as string | undefined,
  },
  render: function Render({ form, detectedPort, autoGeneratedDomain }) {
    return (
      <Block>
        <BlockItem>
          <BlockItemHeader>
            <BlockItemTitle>Domain</BlockItemTitle>
            <form.AppField
              name="isPublic"
              children={(field) => (
                <Button
                  type="button"
                  variant="ghost"
                  onClick={() => {
                    const newIsPublic = !field.state.value;
                    if (!newIsPublic) {
                      form.setErrorMap({
                        onChange: { fields: { domain: undefined, targetPort: undefined } },
                      });
                    }
                    field.handleChange(newIsPublic);
                  }}
                  data-private={!field.state.value ? true : undefined}
                  className="group/button has-hover:hover:bg-border -my-1 -mr-0.5 ml-auto flex cursor-pointer items-center justify-center gap-2.5 rounded-full py-1 pr-1 pl-2.5 font-medium"
                >
                  <p className="text-muted-foreground group-data-private/button:text-foreground has-hover:group-hover/button:text-foreground min-w-0 shrink">
                    Private
                  </p>
                  <div className="bg-muted-more-foreground group-data-private/button:bg-foreground relative h-5 w-9 rounded-full transition">
                    <div className="bg-background absolute top-0.5 left-0.5 size-4 rounded-full transition group-data-private/button:translate-x-4" />
                  </div>
                </Button>
              )}
            />
          </BlockItemHeader>
          <BlockItemContent>
            <form.Subscribe
              selector={(state) => ({ isPublic: state.values.isPublic })}
              children={({ isPublic }) => (
                <form.AppField
                  name="domain"
                  validators={{
                    onChange: ({ value }) => validateDomain({ value, isPublic }),
                  }}
                  children={(field) => (
                    <field.DomainInput
                      disabled={!isPublic}
                      fadeOnDisabled={!isPublic ? false : undefined}
                      data-private={!isPublic ? true : undefined}
                      classNameInput="data-private:text-muted-foreground"
                      Icon={!isPublic ? EyeOffIcon : undefined}
                      classNameIcon="text-muted-foreground"
                      field={field}
                      value={!isPublic ? "Private service" : field.state.value}
                      onBlur={!isPublic ? undefined : field.handleBlur}
                      onChange={
                        !isPublic
                          ? undefined
                          : (e) => {
                              field.handleChange(e.target.value);
                            }
                      }
                      placeholder="example.com"
                      autoCapitalize="off"
                      autoCorrect="off"
                      autoComplete="off"
                      spellCheck="false"
                      autoGeneratedDomain={!isPublic ? undefined : autoGeneratedDomain}
                    />
                  )}
                />
              )}
            />
          </BlockItemContent>
        </BlockItem>
        {/* Branch */}
        <BlockItem>
          <BlockItemHeader>
            <BlockItemTitle>Port</BlockItemTitle>
            <form.Subscribe
              selector={(state) => ({ isPublic: state.values.isPublic })}
              children={({ isPublic }) => {
                if (!isPublic) return null;
                return (
                  <div
                    data-detected={detectedPort !== undefined ? true : undefined}
                    className="bg-warning/10 text-warning border-warning/10 data-detected:text-success data-detected:bg-success/10 data-detected:border-success/10 -my-1 ml-auto flex min-w-0 shrink items-center justify-start gap-1.5 rounded-full border px-2 py-0.5"
                  >
                    {detectedPort !== undefined ? (
                      <CheckCircleIcon className="-ml-0.75 size-3.5 shrink-0" />
                    ) : (
                      <CircleSlashIcon className="-ml-0.75 size-3.5 shrink-0" />
                    )}
                    <p className="min-w-0 shrink truncate text-sm leading-tight font-medium">
                      {detectedPort !== undefined ? (
                        <>
                          Detected: <span className="font-bold">{detectedPort}</span>
                        </>
                      ) : (
                        "Couldn't detect"
                      )}
                    </p>
                  </div>
                );
              }}
            />
          </BlockItemHeader>
          <BlockItemContent>
            <form.Subscribe
              selector={(state) => ({ isPublic: state.values.isPublic })}
              children={({ isPublic }) => (
                <form.AppField
                  name="targetPort"
                  validators={{
                    onChange: ({ value }) => validatePort({ value, isPublic }),
                  }}
                  children={(field) => (
                    <field.TextField
                      disabled={!isPublic}
                      fadeOnDisabled={!isPublic ? false : undefined}
                      data-private={!isPublic ? true : undefined}
                      classNameInput="data-private:text-muted-foreground"
                      Icon={!isPublic ? EyeOffIcon : undefined}
                      classNameIcon="text-muted-foreground"
                      field={field}
                      value={!isPublic ? "Private service" : field.state.value}
                      onBlur={!isPublic ? undefined : field.handleBlur}
                      onChange={
                        !isPublic
                          ? undefined
                          : (e) => {
                              field.handleChange(e.target.value);
                            }
                      }
                      showUndo={
                        isPublic && detectedPort !== undefined && field.state.value !== detectedPort
                      }
                      onUndo={() => {
                        if (detectedPort !== undefined) {
                          field.handleChange(detectedPort);
                        }
                      }}
                      placeholder="3000"
                      autoCapitalize="off"
                      autoCorrect="off"
                      autoComplete="off"
                      spellCheck="false"
                      inputMode="numeric"
                    />
                  )}
                />
              )}
            />
          </BlockItemContent>
        </BlockItem>
      </Block>
    );
  },
});

export default DomainPortBlock;
