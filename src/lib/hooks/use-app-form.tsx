import ErrorCard from "@/components/error-card";
import ErrorLine from "@/components/error-line";
import { DomainCard } from "@/components/service/panel/content/undeployed/domain-card";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Input, InputProps } from "@/components/ui/input";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Slider, SliderProps } from "@/components/ui/slider";
import TextareaWithTokens, { TTextareaWithTokensProps } from "@/components/ui/textarea-with-tokens";
import { cn } from "@/components/ui/utils";
import { appLocale } from "@/lib/constants";
import {
  AnyFieldApi,
  createFormHook,
  createFormHookContexts,
  useStore,
} from "@tanstack/react-form";
import { CheckIcon, RotateCcwIcon } from "lucide-react";
import { FC, ReactNode, useCallback, useRef, useState } from "react";
import { z } from "zod";

const { fieldContext, formContext } = createFormHookContexts();

type TFieldProps = {
  field: AnyFieldApi;
  hideInfo?: boolean;
  dontCheckUntilSubmit?: boolean;
  classNameInput?: string;
  classNameInfo?: string;
};

type TInputWithInfoProps = TFieldProps & InputProps;

function InputWithInfo({
  className,
  hideInfo,
  field,
  classNameInput,
  classNameInfo,
  dontCheckUntilSubmit,
  ...rest
}: TInputWithInfoProps) {
  const submissionAttempts = useStore(field.form.store, (state) => state.submissionAttempts);
  const isFormSubmitted = submissionAttempts > 0;

  if (hideInfo) {
    return <Input {...rest} className={cn("w-full", className, classNameInput)} />;
  }

  return (
    <div className={cn("flex flex-col", className)}>
      <Input {...rest} className={cn("w-full", classNameInput)} />
      {(field.state.meta.isTouched || isFormSubmitted) &&
      (field.state.meta.isBlurred || isFormSubmitted) &&
      (!dontCheckUntilSubmit || isFormSubmitted) &&
      field.state.meta.errors.length ? (
        <ErrorLine
          className={cn("bg-transparent py-1.5 pl-1.5", classNameInfo)}
          message={field.state.meta.errors[0].message}
        />
      ) : null}
    </div>
  );
}

function TextareaWithTokensWithInfo<T>({
  className,
  hideInfo,
  field,
  classNameInput,
  classNameInfo,
  dontCheckUntilSubmit,
  ...rest
}: TTextareaWithTokensProps<T> & TFieldProps) {
  const submissionAttempts = useStore(field.form.store, (state) => state.submissionAttempts);
  const isFormSubmitted = submissionAttempts > 0;

  if (hideInfo) {
    return <TextareaWithTokens {...rest} className={cn("w-full", className, classNameInput)} />;
  }

  return (
    <div className={cn("flex flex-col", className)}>
      <TextareaWithTokens {...rest} className={cn("w-full", classNameInput)} />
      {(field.state.meta.isTouched || isFormSubmitted) &&
      (field.state.meta.isBlurred || isFormSubmitted) &&
      (!dontCheckUntilSubmit || isFormSubmitted) &&
      field.state.meta.errors.length ? (
        <ErrorLine
          className={cn("bg-transparent py-1.5 pl-1.5", classNameInfo)}
          message={field.state.meta.errors[0].message}
        />
      ) : null}
    </div>
  );
}

type TDomainInputWithInfoProps = TFieldProps &
  InputProps & {
    autoGeneratedDomain?: string;
  };

function DomainInput({
  className,
  hideInfo,
  field,
  classNameInput,
  classNameInfo,
  dontCheckUntilSubmit,
  autoGeneratedDomain,
  ...rest
}: TDomainInputWithInfoProps) {
  const submissionAttempts = useStore(field.form.store, (state) => state.submissionAttempts);
  const isFormSubmitted = submissionAttempts > 0;

  const showCardType =
    autoGeneratedDomain !== undefined && field.state.value === autoGeneratedDomain
      ? "auto-generated"
      : "domain-card";

  const showReset = autoGeneratedDomain !== undefined && field.state.value !== autoGeneratedDomain;

  if (hideInfo) {
    return (
      <div className={cn("flex w-full flex-col", className)}>
        <Input {...rest} className={cn("z-10 w-full", showReset && "pr-11", classNameInput)} />
        {showReset && (
          <Button
            variant="ghost"
            className="absolute top-1 right-1 z-10 size-8.5 rounded-md"
            size="icon"
            onClick={() => {
              field.setValue(autoGeneratedDomain);
            }}
          >
            <RotateCcwIcon className="size-4.5" />
          </Button>
        )}
        {showCardType === "domain-card" && (
          <DomainCard domain={field.state.value} className="-mt-3 rounded-t-none pt-2.75" />
        )}
        {showCardType === "auto-generated" && (
          <AutoGeneratedDomainCard className="absolute top-0 -right-1 z-10 -translate-y-1/2" />
        )}
      </div>
    );
  }

  return (
    <div className={cn("relative flex flex-col", className)}>
      <Input {...rest} className={cn("z-10 w-full", showReset && "pr-11", classNameInput)} />
      {showReset && (
        <Button
          variant="ghost"
          className="absolute top-1 right-1 z-10 size-8.5 rounded-md"
          size="icon"
          onClick={() => {
            field.setValue(autoGeneratedDomain);
          }}
        >
          <RotateCcwIcon className="size-4.5" />
        </Button>
      )}
      {showCardType === "domain-card" && (
        <DomainCard domain={field.state.value} className="-mt-3 rounded-t-none pt-2.75" />
      )}
      {showCardType === "auto-generated" && (
        <AutoGeneratedDomainCard className="absolute top-0 -right-1 z-10 -translate-y-1/2" />
      )}
      {(field.state.meta.isTouched || isFormSubmitted) &&
      (field.state.meta.isBlurred || isFormSubmitted) &&
      (!dontCheckUntilSubmit || isFormSubmitted) &&
      field.state.meta.errors.length ? (
        <ErrorLine
          className={cn("bg-transparent py-1.5 pl-1.5", classNameInfo)}
          message={field.state.meta.errors[0].message}
        />
      ) : null}
    </div>
  );
}

function AutoGeneratedDomainCard({ className }: { className?: string }) {
  return (
    <p
      className={cn(
        "text-muted-foreground bg-background pointer-events-none max-w-1/2 min-w-0 truncate rounded-sm border px-1.25 py-[0.09375rem] text-xs leading-tight font-semibold",
        className,
      )}
    >
      Auto-generated
    </p>
  );
}

type TSliderWithInfoProps = TFieldProps &
  SliderProps & {
    classNameMin?: string;
    classNameMax?: string;
    minMaxFormatter?: (value: number) => string;
  };

function StorageSizeInput({
  className,
  hideInfo,
  field,
  classNameInput,
  classNameInfo,
  dontCheckUntilSubmit,
  classNameMin,
  classNameMax,
  minMaxFormatter,
  ...rest
}: TSliderWithInfoProps) {
  const submissionAttempts = useStore(field.form.store, (state) => state.submissionAttempts);
  const isFormSubmitted = submissionAttempts > 0;
  const classNameMinMax = "min-w-0 text-muted-foreground shrink leading-tight text-xs font-medium";

  const Min = useCallback(() => {
    if (rest.min === undefined) return null;
    return (
      <p className={cn(classNameMinMax, classNameMin)}>
        {minMaxFormatter ? minMaxFormatter(rest.min) : rest.min.toLocaleString(appLocale)}
      </p>
    );
  }, [classNameMinMax, classNameMin, minMaxFormatter, rest.min]);

  const Max = useCallback(() => {
    if (rest.max === undefined) return null;
    return (
      <p className={cn(classNameMinMax, classNameMax)}>
        {minMaxFormatter ? minMaxFormatter(rest.max) : rest.max.toLocaleString(appLocale)}
      </p>
    );
  }, [classNameMinMax, classNameMax, minMaxFormatter, rest.max]);

  if (hideInfo) {
    return (
      <div className={cn("flex w-full gap-3", className)}>
        <Min />
        <Slider {...rest} className={cn("flex-1", classNameInput)} />
        <Max />
      </div>
    );
  }

  return (
    <div className={cn("flex flex-col", className)}>
      <div className="flex w-full gap-3">
        <Min />
        <Slider {...rest} className={cn("flex-1", classNameInput)} />
        <Max />
      </div>
      {(field.state.meta.isTouched || isFormSubmitted) &&
      (field.state.meta.isBlurred || isFormSubmitted) &&
      (!dontCheckUntilSubmit || isFormSubmitted) &&
      field.state.meta.errors.length ? (
        <ErrorLine
          className={cn("mt-1 bg-transparent py-1.5 pl-1.5", classNameInfo)}
          message={field.state.meta.errors[0].message}
        />
      ) : null}
    </div>
  );
}

type TAsyncDropdownProps = TFieldProps & {
  items: string[] | undefined;
  isPending: boolean;
  error: string | undefined;
  commandEmptyText: string;
  commandInputPlaceholder: string;
  CommandEmptyIcon: FC<{ className?: string }>;
  className?: string;
  classNameInfo?: string;
  value: string;
  onChange: (value: string) => void;
  children: ({ isOpen }: { isOpen: boolean }) => ReactNode;
};

const placeholderArray = Array.from({ length: 10 }, (_, index) => index);

function AsyncDropdown({
  field,
  items,
  isPending,
  error,
  commandEmptyText,
  commandInputPlaceholder,
  CommandEmptyIcon,
  dontCheckUntilSubmit,
  hideInfo,
  classNameInfo,
  value,
  onChange,
  className,
  children,
}: TAsyncDropdownProps) {
  const submissionAttempts = useStore(field.form.store, (state) => state.submissionAttempts);
  const isFormSubmitted = submissionAttempts > 0;

  const [isOpen, setIsOpen] = useState(false);
  const [commandValue, setCommandValue] = useState(value);
  const scrollAreaRef = useRef<HTMLDivElement>(null);

  return (
    <div className={cn("flex flex-col", className)}>
      <Popover open={isOpen} onOpenChange={setIsOpen}>
        <PopoverTrigger asChild>{children({ isOpen })}</PopoverTrigger>
        <PopoverContent
          animate={false}
          className="flex h-68 max-h-[min(30rem,var(--radix-popper-available-height))] overflow-hidden p-0"
        >
          <Command
            value={commandValue}
            onValueChange={setCommandValue}
            shouldFilter={isPending ? false : true}
            wrapper="none"
            className="flex flex-1 flex-col"
          >
            <CommandInput showSpinner={isPending} placeholder={commandInputPlaceholder} />
            <ScrollArea viewportRef={scrollAreaRef} className="flex flex-1 flex-col">
              <CommandList>
                {items && (
                  <CommandEmpty className="text-muted-foreground flex items-center justify-start gap-2 px-2.5 py-2.5 leading-tight">
                    <CommandEmptyIcon className="size-4.5 shrink-0" />
                    <p className="min-w-0 shrink">{commandEmptyText}</p>
                  </CommandEmpty>
                )}
                <CommandGroup>
                  {!items &&
                    isPending &&
                    placeholderArray.map((_, index) => (
                      <CommandItem disabled key={index}>
                        <p className="bg-foreground animate-skeleton min-w-0 shrink rounded-md leading-tight">
                          Loading
                        </p>
                      </CommandItem>
                    ))}
                  {!items && !isPending && error && (
                    <ErrorCard className="rounded-md" message={error} />
                  )}
                  {items &&
                    items.map((item) => (
                      <CommandItem
                        onSelect={(v) => {
                          onChange(v);
                          setIsOpen(false);
                        }}
                        key={item}
                        className="group/item px-3"
                        data-checked={field.state.value === item ? true : undefined}
                      >
                        <p className="min-w-0 shrink leading-tight">{item}</p>
                        <CheckIcon
                          strokeWidth={2.5}
                          className="-mr-0.5 ml-auto size-4.5 opacity-0 group-data-checked/item:opacity-100"
                        />
                      </CommandItem>
                    ))}
                </CommandGroup>
              </CommandList>
            </ScrollArea>
          </Command>
        </PopoverContent>
      </Popover>
      {!hideInfo &&
      (field.state.meta.isTouched || isFormSubmitted) &&
      (field.state.meta.isBlurred || isFormSubmitted) &&
      (!dontCheckUntilSubmit || isFormSubmitted) &&
      field.state.meta.errors.length ? (
        <ErrorLine
          className={cn("mt-1 bg-transparent py-1.5 pl-1.5", classNameInfo)}
          message={field.state.meta.errors[0].message}
        />
      ) : null}
    </div>
  );
}

export const { useAppForm } = createFormHook({
  fieldComponents: {
    TextField: InputWithInfo,
    NumberField: InputWithInfo,
    TextareaWithTokens: TextareaWithTokensWithInfo,
    DomainInput,
    StorageSizeInput,
    AsyncDropdown,
  },
  formComponents: {
    SubmitButton: Button,
  },
  fieldContext,
  formContext,
});

export const DomainFieldSchema = z.string().url();
